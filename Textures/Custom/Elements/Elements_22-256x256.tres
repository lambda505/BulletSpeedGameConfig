[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://blb76npx6d1tm"]

[ext_resource type="Texture2D" uid="uid://bk10j3om8gg3k" path="res://textures/Custom/Elements/Elements_22-256x256.png" id="1_irf8u"]

[sub_resource type="Shader" id="Shader_ksiao"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_nearest_mipmap, repeat_enable;

uniform sampler2D texture_emission : source_color, hint_default_black, filter_nearest_mipmap, repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy : hint_range(0.0, 100.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	VERTEX.y += 0.5*sin(1.75*TIME + 200.0*VERTEX.x);
	VERTEX.y += 0.5*sin(1.75*TIME + 200.0*VERTEX.z);
}

void fragment() {
	vec2 scaledUV = UV;
    vec2 scrolledUV = scaledUV + 0.03 * TIME;
    scrolledUV = mod(scrolledUV, vec2(1.0, 1.0));
    scrolledUV = floor(scrolledUV * float(64)) / float(64);
	vec2 base_uv = UV;
	vec2 base_uv2 = UV2;

	vec4 albedo_tex = texture(texture_albedo, scrolledUV);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	// Emission: Enabled
	vec3 emission_tex = texture(texture_emission, base_uv2).rgb;
	// Emission Operator: Add
	EMISSION = (emission.rgb + emission_tex) * emission_energy;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_ksiao")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/emission = Color(0.858824, 0.909804, 0.690196, 1)
shader_parameter/emission_energy = 0.15
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("1_irf8u")
